//===- InitAllPasses.h - MLIR Passes Registration ---------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines a helper to trigger the registration of all dialects and
// passes to the system.
//
//===----------------------------------------------------------------------===//

#ifndef MTIR_INITALLPASSES_H
#define MTIR_INITALLPASSES_H

// #include "mtir/Conversion/Passes.h"
#include "mtir/Dialect/MtFusion/Pipelines/Passes.h"
#include "mtir/Dialect/MtFusion/Transforms/Passes.h"

#if MTIR_TORCH_CONVERSIONS_ENABLED
#include "torch-mlir-dialects/Dialect/TMTensor/Transforms/Passes.h"
#include "torch-mlir/Conversion/Passes.h"
#include "torch-mlir/Conversion/TorchOnnxToTorch/Passes.h"
#include "torch-mlir/Dialect/Torch/Transforms/Passes.h"
#include "torch-mlir/Dialect/TorchConversion/Transforms/Passes.h"
#endif

namespace mtir {

// This function may be called to register the hivm-specific MLIR passes with
// the global registry.
inline void registerAllPasses() {
  // Conversion passes
  // mtir::registerConversionPasses();

  // Dialect passes
  mlir::mtfusion::registerMtFusionPasses();

#if MTIR_TORCH_CONVERSIONS_ENABLED
  bishengir::registerConvertTorchToMtFusion();
  mlir::torch::registerTorchPasses();
  mlir::torch::registerTorchConversionPasses();
  mlir::torch::registerConversionPasses();
  mlir::torch::onnx_c::registerTorchOnnxToTorchPasses();
  mlir::torch::TMTensor::registerPasses();
#endif

  // Dialect passes that aren't generated by tblgen
  // mlir::mtfusion::registerAutoScheduleInterpreterPass();
  // mlir::mtfusion::registerEraseAutoSchedulePass();

  // Dialect pipelines
  // mlir::mtfusion::registerLowerMtFusionPipelines();

#if MTIR_TORCH_CONVERSIONS_ENABLED
  mtir::registerTorchToMtFusionPipelines();
#endif
}

} // namespace mtir

#endif // MTIR_INITALLPASSES_H
